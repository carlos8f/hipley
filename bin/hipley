#!/usr/bin/env node
var program = require('commander')
var pkg = require('../package.json')
var fs = require('fs')
var path = require('path')
var spawn = require('child_process').spawn
var _ = require('lodash')
var hipley = require('../')

program
  .version(pkg.version)
  .option('-d, --dev', 'Run a development server')
  .option('-b, --build', 'Build the production bundles')
  .option('-s, --serve', 'Run a production server')
  .option('-p, --port [port]', 'Port to run the dev server on (3000)')
  .option('-r, --proxy [port]', 'Proxy requests to another port')
  .option('-c, --cmd [command]', 'Spawn a command, for example a node server')
  .option('--src [dir]', 'The directory containing the source files (src/)')
  .option('--dest [dir]', 'The directory to use for the build (build/)')

program.on('--help', function () {
  console.log([
    '  Development Server:',
    '',
    '      $ hipley --dev',
    '',
    '  Production Build:',
    '',
    '      $ hipley --build',
    '',
    '  Production Server:',
    '',
    '      $ hipley --serve',
    '',
    '  Configuration can be specified in a .hipleyrc file. Defaults:',
    '',
    JSON.stringify(hipley.defaults, null, 2).split('\n').map(function (line) { return '    ' + line }).join('\n'),
    ''
  ].join('\n'))
})

program.parse(process.argv)

// Set options from arguments.
var keys = ['port', 'proxy', 'cmd', 'src', 'dest']
keys.forEach(function (key) {
  if (program[key]) {
    hipley.set(key, program[key])
  }
})

// Helper to merge options into env.
function getEnv (env) {
  var optionEnv = {__root: hipley.root}
  Object.keys(hipley.options).forEach(function (key) {
    optionEnv['__' + key] = hipley.options[key]
  })
  return _.pick(_.extend(optionEnv, process.env, env || {}), _.identity)
}

// Helper to spawn a command.
function run (opts, cb) {
  var proc = spawn(opts.cmd, opts.args, {env: opts.env})
  proc.stdout.pipe(process.stdout)
  proc.stderr.pipe(process.stderr)
  if (cb) {
    proc.on('exit', cb)
  }
}

// Helper to run a gulp task.
function runGulp (task, env, cb) {
  run({
    cmd: path.resolve(__dirname, '../node_modules/.bin/gulp'),
    args: [task, '--cwd', __dirname],
    env: getEnv(env)
  }, cb)
}

if (program.dev) {
  // Start development server.
  run({
    cmd: 'node',
    args: [path.resolve(__dirname, '../devServer.js')],
    env: getEnv({NODE_ENV: 'development'})
  })

  // Run Gulp.
  runGulp('default', {NODE_ENV: 'development'})

  // Start the cmd (if needed).
  if (hipley.options.cmd) {
    var args = hipley.options.cmd.split(' ')
    run({
      cmd: args.shift(),
      args: args,
      cwd: hipley.root,
      env: getEnv({NODE_ENV: 'development'})
    })
  }
} else if (program.serve) {
  if (!fs.existsSync(path.resolve(hipley.root, hipley.options.dest, 'js/app.js'))) {
    runGulp('build-prod', {NODE_ENV: 'production'}, function () {
      run({
        cmd: 'node',
        args: [path.resolve(__dirname, '../server.js')],
        env: getEnv({NODE_ENV: 'production'})
      })
    })
  } else {
    run({
      cmd: 'node',
      args: [path.resolve(__dirname, '../server.js')],
      env: getEnv({NODE_ENV: 'production'})
    })
  }
} else {
  // PRODUCTION BUILD
  runGulp('build-prod', {NODE_ENV: 'production'})
}
