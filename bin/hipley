#!/usr/bin/env node
var program = require('commander')
var pkg = require('../package.json')
var fs = require('fs')
var path = require('path')
var spawn = require('child_process').spawn
var _ = require('lodash')

var cwd = process.cwd()
var options = {
  port: 3000,
  proxy: null,
  cmd: null,
  source: 'src',
  dest: 'build',
  browserSync: {
    ui: 3001
  },
  vendors: []
}

program
  .version(pkg.version)
  .option('-d, --dev', 'Run a development server, rather than build')
  .option('-p, --port [port]', 'Port to run the dev server on (3000)')
  .option('-r, --proxy [port]', 'Proxy requests to another port')
  .option('-c, --cmd [command]', 'Spawn a command, for example a node server')
  .option('--source [dir]', 'The directory containing the source files (src/)')
  .option('--dest [dir]', 'The directory to use for the build (build/)')

program.on('--help', function () {
  console.log([
    '  Production Build:',
    '',
    '      $ hipley',
    '',
    '  Development Server:',
    '',
    '      $ hipley --dev -p 3000 -r 3005 --cmd "motley -p 3005"',
    '',
    '  Configuration can be specified in a .hipleyrc file. Defaults:',
    '',
    JSON.stringify(options, null, 2).split('\n').map(function (line) { return '    ' + line }).join('\n'),
    '',
  ].join('\n'))
})

program.parse(process.argv)

// Load .hipleyrc.
var hipleyrc
try {
  hipleyrc = JSON.parse(fs.readFileSync(path.resolve(cwd, '.hipleyrc')))
} catch (e) {}

// Merge into options.
if (hipleyrc) {
  _.extend(options, hipleyrc)
}

// DEVELOPMENT
if (program.dev) {
  console.log('Development')
}
// PRODUCTION
else {
  var gulp = {
    cmd: path.resolve(__dirname, '../node_modules/.bin/gulp'),
    args: ['build-prod', '--cwd', __dirname],
    env: _.extend({}, process.env, {__root: cwd})
  }
  gulp.proc = spawn(gulp.cmd, gulp.args, {env: gulp.env})
  gulp.proc.stdout.pipe(process.stdout)
  gulp.proc.stderr.pipe(process.stderr)
}
