#!/usr/bin/env node
var program = require('commander')
var pkg = require('../package.json')
var fs = require('fs')
var path = require('path')
var spawn = require('child_process').spawn
var _ = require('lodash')

var cwd = process.cwd()
var options = {
  port: 3000,
  proxy: null,
  cmd: null,
  src: 'src',
  dest: 'build',
  browserSync: {
    ui: 3001
  },
  devServer: 3002,
  vendors: []
}

program
  .version(pkg.version)
  .option('-d, --dev', 'Run a development server, rather than build')
  .option('-p, --port [port]', 'Port to run the dev server on (3000)')
  .option('-r, --proxy [port]', 'Proxy requests to another port')
  .option('-c, --cmd [command]', 'Spawn a command, for example a node server')
  .option('--src [dir]', 'The directory containing the source files (src/)')
  .option('--dest [dir]', 'The directory to use for the build (build/)')

program.on('--help', function () {
  console.log([
    '  Production Build:',
    '',
    '      $ hipley',
    '',
    '  Development Server:',
    '',
    '      $ hipley --dev',
    '',
    '  Configuration can be specified in a .hipleyrc file. Defaults:',
    '',
    JSON.stringify(options, null, 2).split('\n').map(function (line) { return '    ' + line }).join('\n'),
    '',
  ].join('\n'))
})

program.parse(process.argv)

// Load .hipleyrc.
var hipleyrc
try {
  hipleyrc = JSON.parse(fs.readFileSync(path.resolve(cwd, '.hipleyrc')))
} catch (e) {}

// Merge into options.
if (hipleyrc) {
  _.extend(options, hipleyrc)
}

// Helper to merge options into env.
function getEnv (env) {
  return _.pick(_.extend({}, process.env, {
    __root: cwd,
    __port: options.port,
    __dev: options.devServer,
    __proxy: options.proxy,
    __src: options.src,
    __dest: options.dest
  }, env || {}), _.identity)
}

// Helper to spawn a command.
function run (opts) {
  var proc = spawn(opts.cmd, opts.args, {env: opts.env})
  proc.stdout.pipe(process.stdout)
  proc.stderr.pipe(process.stderr)
}

// Helper to run a gulp task.
function runGulp (task) {
  run({
    cmd: path.resolve(__dirname, '../node_modules/.bin/gulp'),
    args: [task, '--cwd', __dirname],
    env: getEnv()
  })
}

// DEVELOPMENT
if (program.dev) {
  // Start dev server.
  var server = {
    cmd: 'node',
    args: [path.resolve(__dirname, '../server.js')],
    env: getEnv()
  }
  run(server)

  // Run Gulp.
  runGulp('default')

  // Start the cmd (if needed).
  if (options.cmd) {
    var args = options.cmd.split(' ')
    run({
      cmd: args.shift(),
      args: args,
      cwd: cwd,
      env: getEnv()
    })
  }

}
// PRODUCTION
else {
  runGulp('build-prod')
}
